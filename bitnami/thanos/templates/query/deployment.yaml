<<<<<<< HEAD
{{- $query := (include "thanos.query.values" . | fromYaml) -}}
{{- if $query.enabled }}

{{- $shards := int 0 }}

{{- if .Values.storegateway.sharded.hashPartitioning.shards }}
  {{- $shards = int .Values.storegateway.sharded.hashPartitioning.shards }}
{{- else }}
  {{- $shards = len .Values.storegateway.sharded.timePartitioning }}
{{- end }}

=======
{{- if .Values.query.enabled }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-query
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: query
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
<<<<<<< HEAD
    {{- end }}
spec:
  replicas: {{ $query.replicaCount }}
  strategy:
    type: {{ $query.strategyType }}
    {{- if (eq "Recreate" $query.strategyType) }}
    rollingUpdate: null
=======
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.query.autoscaling.enabled }}
  replicas: {{ .Values.query.replicaCount }}
  {{- end }}
  {{- if .Values.query.updateStrategy }}
  strategy: {{- toYaml .Values.query.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: query
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: query
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
<<<<<<< HEAD
        {{- end }}
        {{- if $query.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" $query.podLabels "context" $) | nindent 8 }}
=======
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
        {{- end }}
        {{- if .Values.query.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.query.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap .Values.query.podAnnotations }}
      annotations:
        {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
        checksum/ruler-configuration: {{ include (print $.Template.BasePath "/query/sd-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.query.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.query.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- include "thanos.imagePullSecrets" . | nindent 6 }}
      serviceAccount: {{ include "thanos.serviceAccount.name" (dict "component" "query" "context" $) }}
      automountServiceAccountToken: {{ .Values.query.automountServiceAccountToken }}
      {{- if .Values.query.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.query.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.query.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.query.podAffinityPreset "component" "query" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.query.podAntiAffinityPreset "component" "query" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.query.nodeAffinityPreset.type "key" .Values.query.nodeAffinityPreset.key "values" .Values.query.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.query.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.query.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.query.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.priorityClassName }}
      priorityClassName: {{ .Values.query.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.query.schedulerName }}
      schedulerName: {{ .Values.query.schedulerName }}
      {{- end }}
<<<<<<< HEAD
      {{- if $query.podSecurityContext.enabled }}
      securityContext: {{- omit $query.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        {{- if $query.extraContainers }}
        {{- include "common.tplvalues.render" (dict "value" $query.extraContainers "context" $) | nindent 8 }}
=======
      {{- if .Values.query.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.query.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.query.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.query.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.query.initContainers }}
      initContainers: {{- include "common.tplvalues.render" (dict "value" .Values.query.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.query.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.query.sidecars "context" $) | nindent 8 }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
        {{- end }}
        - name: query
          image: {{ include "thanos.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
<<<<<<< HEAD
          {{- if $query.containerSecurityContext.enabled }}
          securityContext: {{- omit $query.containerSecurityContext "enabled" | toYaml | nindent 12 }}
=======
          {{- if .Values.query.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.query.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.query.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.query.command "context" $) | nindent 12 }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
          {{- end }}
          args:
            {{- if .Values.query.args }}
            {{- include "common.tplvalues.render" (dict "value" .Values.query.args "context" $) | nindent 12 }}
            {{- else }}
            - query
            - --log.level={{ .Values.query.logLevel }}
            - --log.format={{ .Values.query.logFormat }}
            - --grpc-address=0.0.0.0:10901
            - --http-address=0.0.0.0:10902
            {{- if kindIs "string" .Values.query.replicaLabel }}
            - --query.replica-label={{ .Values.query.replicaLabel }}
            {{- else }}
            {{- range .Values.query.replicaLabel }}
            - --query.replica-label={{ . }}
            {{- end }}
            {{- end }}
            {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
            - --store.sd-files=/conf/servicediscovery.yml
            {{- end }}
            {{- if and .Values.query.dnsDiscovery.enabled .Values.query.dnsDiscovery.sidecarsService .Values.query.dnsDiscovery.sidecarsNamespace }}
            - --endpoint=dnssrv+_grpc._tcp.{{- include "common.tplvalues.render" ( dict "value" .Values.query.dnsDiscovery.sidecarsService "context" $) -}}.{{- include "common.tplvalues.render"  ( dict "value" .Values.query.dnsDiscovery.sidecarsNamespace "context" $) -}}.svc.{{ .Values.clusterDomain }}
            {{- end }}
            {{- if and .Values.storegateway.enabled .Values.storegateway.sharded.enabled }}
            {{- $shards := int 0 }}
            {{- if .Values.storegateway.sharded.hashPartitioning.shards }}
            {{- $shards = int .Values.storegateway.sharded.hashPartitioning.shards }}
            {{- else }}
            {{- $shards = len .Values.storegateway.sharded.timePartitioning }}
            {{- end }}
            {{- range $index, $_ := until $shards }}
            - --endpoint=dnssrv+_grpc._tcp.{{ include "common.names.fullname" $ }}-storegateway-{{ toString $index }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}
            {{- end }}
<<<<<<< HEAD
            {{- if and .Values.storegateway.enabled .Values.storegateway.sharded.enabled }}
            {{- range $index, $_ := until $shards }}
            - --store=dnssrv+_grpc._tcp.{{ include "common.names.fullname" $ }}-storegateway-{{ toString $index }}.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}
            {{- end }}
            {{- end }}
            {{- if and .Values.storegateway.enabled $query.dnsDiscovery.enabled (not .Values.storegateway.sharded.enabled )}}
            - --store=dnssrv+_grpc._tcp.{{ include "common.names.fullname" . }}-storegateway{{ if .Values.storegateway.service.additionalHeadless }}-headless{{ end }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
=======
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
            {{- end }}
            {{- if and .Values.storegateway.enabled .Values.query.dnsDiscovery.enabled (not .Values.storegateway.sharded.enabled ) }}
            - --endpoint=dnssrv+_grpc._tcp.{{ include "common.names.fullname" . }}-storegateway{{ if .Values.storegateway.service.additionalHeadless }}-headless{{ end }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- end }}
            {{- if and .Values.ruler.enabled .Values.query.dnsDiscovery.enabled }}
            - --endpoint=dnssrv+_grpc._tcp.{{ include "common.names.fullname" . }}-ruler{{ if .Values.ruler.service.additionalHeadless }}-headless{{ end }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- end }}
            {{- if and .Values.receive.enabled .Values.query.dnsDiscovery.enabled }}
            - --endpoint=dnssrv+_grpc._tcp.{{ include "common.names.fullname" . }}-receive{{ if .Values.receive.service.additionalHeadless }}-headless{{ end }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            {{- end }}
<<<<<<< HEAD
            {{- if $query.grpcTLS.server.autoGenerated }}
            - --grpc-server-tls-cert=/tls/server/tls.crt
            - --grpc-server-tls-key=/tls/server/tls.key
            - --grpc-server-tls-client-ca=/tls/server/ca.crt
            {{- else }}
            {{- if or $query.grpcTLS.server.secure $query.grpcTLS.server.existingSecret}}
            - --grpc-server-tls-cert=/tls/server/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpcTLS.server.existingSecret "key" "tls-cert") }}
            - --grpc-server-tls-key=/tls/server/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpcTLS.server.existingSecret "key" "tls-key") }}
            {{- if or $query.grpcTLS.server.ca $query.grpcTLS.server.existingSecret }}
            - --grpc-server-tls-client-ca=/tls/server/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpcTLS.server.existingSecret "key" "ca-cert") }}
=======
            {{- range .Values.query.stores }}
            - --endpoint={{ . }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
            {{- end }}
            {{- if .Values.query.grpc.server.tls.enabled }}
            - --grpc-server-tls-cert=/certs/server/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpc.server.tls.existingSecret "key" "tls-cert") }}
            - --grpc-server-tls-key=/certs/server/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpc.server.tls.existingSecret "key" "tls-key") }}
            - --grpc-server-tls-client-ca=/certs/server/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpc.server.tls.existingSecret "key" "ca-cert") }}
            {{- end }}
<<<<<<< HEAD
            {{- end }}
            {{- if $query.grpcTLS.client.autoGenerated }}
            - --grpc-client-tls-secure
            - --grpc-client-tls-cert=/tls/client/tls.crt
            - --grpc-client-tls-key=/tls/client/tls.key
            - --grpc-client-tls-ca=/tls/client/ca.crt
            {{- else }}
            {{- if or $query.grpcTLS.client.secure $query.grpcTLS.client.existingSecret }}
=======
            {{- if .Values.query.grpc.client.tls.enabled }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
            - --grpc-client-tls-secure
            - --grpc-client-tls-cert=/certs/client/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpc.client.tls.existingSecret "key" "tls-cert") }}
            - --grpc-client-tls-key=/certs/client/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpc.client.tls.existingSecret "key" "tls-key") }}
            - --grpc-client-tls-ca=/certs/client/{{ include "common.secrets.key" (dict "existingSecret" .Values.query.grpc.client.tls.existingSecret "key" "ca-cert") }}
            {{- end }}
            {{- if .Values.query.grpc.client.serverName }}
            - --grpc-client-server-name={{ .Values.query.grpc.client.serverName }}
            {{- end }}
            {{- if .Values.query.extraFlags }}
            {{- .Values.query.extraFlags | toYaml | nindent 12 }}
            {{- end }}
            {{- end }}
<<<<<<< HEAD
            {{- end }}
            {{- if $query.grpcTLS.client.servername }}
            - --grpc-client-server-name={{$query.grpcTLS.client.servername}}
=======
          {{- if .Values.query.extraEnvVars }}
          env: {{- include "common.tplvalues.render" (dict "value" .Values.query.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          {{- if or .Values.query.extraEnvVarsCM .Values.query.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.query.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.query.extraEnvVarsCM "context" $) }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
            {{- end }}
            {{- if .Values.query.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.query.extraEnvVarsSecret "context" $) }}
            {{- end }}
<<<<<<< HEAD
          {{- if .Values.query.extraEnv }}
          env:
            {{- toYaml .Values.query.extraEnv | nindent 12 }}
=======
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
          {{- end }}
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
<<<<<<< HEAD
          {{- if $query.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: {{ $query.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ $query.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ $query.livenessProbe.periodSeconds }}
            successThreshold: {{ $query.livenessProbe.successThreshold }}
            failureThreshold: {{ $query.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if $query.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: {{ $query.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ $query.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ $query.readinessProbe.periodSeconds }}
            successThreshold: {{ $query.readinessProbe.successThreshold }}
            failureThreshold: {{ $query.readinessProbe.failureThreshold }}
=======
          {{- if .Values.query.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.query.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /-/healthy
              port: http
          {{- else if .Values.query.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.query.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.query.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.query.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /-/ready
              port: http
          {{- else if .Values.query.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.query.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.query.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.query.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /-/ready
              port: http
          {{- else if .Values.query.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.query.customStartupProbe "context" $) | nindent 12 }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
          {{- end }}
          {{- if .Values.query.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.query.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.query.resources }}
          resources: {{- toYaml .Values.query.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
            - name: sd-config
              mountPath: /conf/servicediscovery.yml
              subPath: servicediscovery.yml
<<<<<<< HEAD
      {{- end }}
      {{- if $query.grpcTLS.server.secure }}
            - name: tls-server
              mountPath: /tls/server
      {{- end }}
      {{- if $query.grpcTLS.client.secure }}
            - name: tls-client
              mountPath: /tls/client
      {{- end }}
=======
            {{- end }}
            {{- if .Values.query.grpc.server.tls.enabled }}
            - name: grpc-server-tls
              mountPath: /certs/server
            {{- end }}
            {{- if .Values.query.grpc.client.tls.enabled }}
            - name: grpc-client-tls
              mountPath: /certs/client
            {{- end }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
            {{- if .Values.query.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.query.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
      volumes:
        {{- if or (include "thanos.query.createSDConfigmap" .) .Values.query.existingSDConfigmap }}
        - name: sd-config
          configMap:
            name: {{ include "thanos.query.SDConfigmapName" . }}
<<<<<<< HEAD
      {{- end }}
      {{- if or $query.grpcTLS.server.secure $query.grpcTLS.server.existingSecret $query.grpcTLS.server.autoGenerated }}
        - name: tls-server
          secret:
            {{- if $query.grpcTLS.server.autoGenerated }}
            secretName: {{ printf "%s-crt" (include "common.names.fullname" .) }}
            {{- else }}
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.query.grpcTLS.server.existingSecret "defaultNameSuffix" "query-tls-server" "context" $) }}
            {{- end }}
      {{- end }}
      {{- if or $query.grpcTLS.client.secure $query.grpcTLS.client.existingSecret $query.grpcTLS.client.autoGenerated }}
        - name: tls-client
          secret:
            {{- if $query.grpcTLS.client.autoGenerated }}
            secretName: {{ printf "%s-crt" (include "common.names.fullname" .) }}
            {{- else }}
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.query.grpcTLS.client.existingSecret "defaultNameSuffix" "query-tls-client" "context" $) }}
            {{- end }}
      {{- end }}
        {{- if .Values.query.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.query.extraVolumes "context" $) | nindent 8 }}
        {{- end }}

=======
        {{- end }}
        {{- if .Values.query.grpc.server.tls.enabled }}
        - name: grpc-server-tls
          secret:
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.query.grpc.server.tls.existingSecret "defaultNameSuffix" "query-grpc-server" "context" $) }}
        {{- end }}
        {{- if .Values.query.grpc.client.tls.enabled }}
        - name: grpc-client-tls
          secret:
            secretName: {{ include "common.secrets.name" (dict "existingSecret" .Values.query.grpc.client.tls.existingSecret "defaultNameSuffix" "query-grpc-client" "context" $) }}
        {{- end }}
        {{- if .Values.query.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.query.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
>>>>>>> ee2009506fa88a29a08be8ffce1bb6753a5ab4d0
{{- end }}
